const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Generate unique inquiry ID
const generateInquiryId = () => {
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000);
    return `INQ-${timestamp}${random}`;
};

// Generate filename for prospectus
const generateFilename = (inquiryData) => {
    const date = new Date().toISOString().split('T')[0];
    const safeFamilyName = inquiryData.familySurname.replace(/[^a-zA-Z0-9]/g, '-');
    const safeFirstName = inquiryData.firstName.replace(/[^a-zA-Z0-9]/g, '-');
    
    return `More-House-School-${safeFamilyName}-Family-${safeFirstName}-${inquiryData.entryYear}-${date}.html`;
};

// Ensure required directories exist
const ensureDirectories = async () => {
    try {
        await fs.mkdir('data', { recursive: true });
        await fs.mkdir('prospectuses', { recursive: true });
        console.log('📁 Directory structure verified');
    } catch (error) {
        console.error('❌ Error creating directories:', error.message);
    }
};

// Save inquiry data to JSON file
const saveInquiryData = async (formData) => {
    try {
        const inquiryId = generateInquiryId();
        const timestamp = new Date().toISOString();
        const filename = `inquiry-${timestamp}.json`;
        
        const inquiryRecord = {
            id: inquiryId,
            receivedAt: timestamp,
            status: 'received',
            prospectusGenerated: false,
            ...formData
        };
        
        const filepath = path.join('data', filename);
        await fs.writeFile(filepath, JSON.stringify(inquiryRecord, null, 2));
        
        console.log(`💾 Inquiry saved: ${filename}`);
        console.log(`📄 Suggested prospectus filename: ${generateFilename(inquiryRecord)}`);
        
        return inquiryRecord;
        
    } catch (error) {
        console.error('❌ Error saving inquiry:', error.message);
        throw error;
    }
};

// Generate prospectus from inquiry data
const generateProspectus = async (inquiryData) => {
    try {
        console.log(`\n🎨 GENERATING PROSPECTUS FOR: ${inquiryData.firstName} ${inquiryData.familySurname}`);
        console.log('═══════════════════════════════════════');
        
        // Read the prospectus template
        const templatePath = path.join(__dirname, 'public', 'prospectus_template.html');
        let templateHtml = await fs.readFile(templatePath, 'utf8');
        
        console.log('📄 Template loaded successfully');
        
        // Generate the personalized filename
        const filename = generateFilename(inquiryData);
        const outputPath = path.join(__dirname, 'prospectuses', filename);
        
        // Create personalization script injection
        const personalizationScript = `
<script>
// Auto-initialize prospectus with form data
document.addEventListener('DOMContentLoaded', function() {
    const userData = ${JSON.stringify(inquiryData, null, 2)};
    console.log('🎯 Initializing prospectus with data:', userData);
    
    // Call the personalization function from the template
    if (typeof initializeProspectus === 'function') {
        initializeProspectus(userData);
        console.log('✅ Prospectus personalized for:', userData.firstName, userData.familySurname);
    } else {
        console.error('❌ initializeProspectus function not found');
    }
});
</script>`;

        // Inject the personalization script before closing body tag
        templateHtml = templateHtml.replace('</body>', personalizationScript + '\n</body>');
        
        // Add meta tags with inquiry information
        const metaTags = `
    <meta name="inquiry-id" content="${inquiryData.id}">
    <meta name="generated-date" content="${new Date().toISOString()}">
    <meta name="student-name" content="${inquiryData.firstName} ${inquiryData.familySurname}">
    <meta name="entry-year" content="${inquiryData.entryYear}">
    <meta name="age-group" content="${inquiryData.ageGroup}">`;
        
        templateHtml = templateHtml.replace('</head>', metaTags + '\n</head>');
        
        // Update page title
        const personalizedTitle = `${inquiryData.firstName} ${inquiryData.familySurname} - More House School Prospectus ${inquiryData.entryYear}`;
        templateHtml = templateHtml.replace(/<title>.*<\/title>/, `<title>${personalizedTitle}</title>`);
        
        // Save the personalized prospectus
        await fs.writeFile(outputPath, templateHtml, 'utf8');
        
        console.log(`📁 Prospectus saved: ${filename}`);
        console.log(`🌐 Will be available at: http://localhost:${PORT}/prospectuses/${filename}`);
        
        return {
            filename,
            path: outputPath,
            url: `/prospectuses/${filename}`,
            generatedAt: new Date().toISOString()
        };
        
    } catch (error) {
        console.error('❌ Error generating prospectus:', error.message);
        throw error;
    }
};

// Update inquiry status after prospectus generation
const updateInquiryStatus = async (inquiryId, prospectusInfo) => {
    try {
        const files = await fs.readdir('data');
        const inquiryFiles = files.filter(file => file.startsWith('inquiry-') && file.endsWith('.json'));
        
        for (const file of inquiryFiles) {
            const filepath = path.join('data', file);
            const content = await fs.readFile(filepath, 'utf8');
            const inquiry = JSON.parse(content);
            
            if (inquiry.id === inquiryId) {
                // Update the inquiry record
                inquiry.prospectusGenerated = true;
                inquiry.prospectusFilename = prospectusInfo.filename;
                inquiry.prospectusUrl = prospectusInfo.url;
                inquiry.prospectusGeneratedAt = prospectusInfo.generatedAt;
                inquiry.status = 'prospectus_generated';
                
                // Save updated inquiry
                await fs.writeFile(filepath, JSON.stringify(inquiry, null, 2));
                console.log(`📝 Updated inquiry record: ${inquiryId}`);
                return inquiry;
            }
        }
        
        throw new Error(`Inquiry ${inquiryId} not found`);
        
    } catch (error) {
        console.error('❌ Error updating inquiry status:', error.message);
        throw error;
    }
};

// Enhanced webhook endpoint with prospectus generation
app.post('/webhook', async (req, res) => {
    console.log('\n🎯 WEBHOOK RECEIVED');
    console.log('📅 Timestamp:', new Date().toISOString());
    
    try {
        const formData = req.body;
        
        // Validate required fields
        const requiredFields = ['firstName', 'familySurname', 'parentEmail', 'ageGroup', 'entryYear'];
        const missingFields = requiredFields.filter(field => !formData[field]);
        
        if (missingFields.length > 0) {
            console.log('❌ Missing required fields:', missingFields);
            return res.status(400).json({
                success: false,
                error: 'Missing required fields',
                missingFields,
                received: Object.keys(formData)
            });
        }
        
        // Log the received data (existing logging code)
        console.log('\n📋 FORM DATA RECEIVED:');
        console.log('═══════════════════════════════════════');
        
        // Personal Information
        console.log('👨‍👩‍👧 FAMILY INFORMATION:');
        console.log(`   Name: ${formData.firstName} ${formData.familySurname}`);
        console.log(`   Email: ${formData.parentEmail}`);
        console.log(`   Age Group: ${formData.ageGroup}`);
        console.log(`   Entry Year: ${formData.entryYear}`);
        
        // Academic Interests
        const academicInterests = [];
        ['sciences', 'mathematics', 'english', 'languages', 'humanities', 'business'].forEach(interest => {
            if (formData[interest]) academicInterests.push(interest);
        });
        console.log('\n📚 ACADEMIC INTERESTS:');
        console.log(`   ${academicInterests.length > 0 ? academicInterests.join(', ') : 'None selected'}`);
        
        // Creative Interests
        const creativeInterests = [];
        ['drama', 'music', 'art', 'creative_writing'].forEach(interest => {
            if (formData[interest]) creativeInterests.push(interest);
        });
        console.log('\n🎨 CREATIVE INTERESTS:');
        console.log(`   ${creativeInterests.length > 0 ? creativeInterests.join(', ') : 'None selected'}`);
        
        // Co-curricular Interests
        const coCurricularInterests = [];
        ['sport', 'leadership', 'community_service', 'debating'].forEach(interest => {
            if (formData[interest]) coCurricularInterests.push(interest);
        });
        console.log('\n🏃‍♀️ CO-CURRICULAR INTERESTS:');
        console.log(`   ${coCurricularInterests.length > 0 ? coCurricularInterests.join(', ') : 'None selected'}`);
        
        // Family Priorities
        const familyPriorities = [];
        ['academic_excellence', 'pastoral_care', 'small_classes', 'london_location', 'values_based', 'university_prep'].forEach(priority => {
            if (formData[priority]) familyPriorities.push(priority);
        });
        console.log('\n💝 FAMILY PRIORITIES:');
        console.log(`   ${familyPriorities.length > 0 ? familyPriorities.join(', ') : 'None selected'}`);
        
        // Technical metadata
        console.log('\n🔧 TECHNICAL METADATA:');
        console.log(`   User Agent: ${formData.userAgent || 'Not provided'}`);
        console.log(`   Referrer: ${formData.referrer || 'Not provided'}`);
        console.log(`   Submission Time: ${formData.submissionTimestamp || 'Not provided'}`);
        
        console.log('═══════════════════════════════════════\n');
        
        // Save the inquiry data to file
        const inquiryRecord = await saveInquiryData(formData);
        
        // Generate the prospectus
        const prospectusInfo = await generateProspectus(inquiryRecord);
        
        // Update inquiry status
        const updatedInquiry = await updateInquiryStatus(inquiryRecord.id, prospectusInfo);
        
        // Success response with prospectus information
        const response = {
            success: true,
            message: 'Inquiry received and prospectus generated successfully',
            inquiryId: inquiryRecord.id,
            prospectus: {
                filename: prospectusInfo.filename,
                url: `http://localhost:${PORT}${prospectusInfo.url}`,
                generatedAt: prospectusInfo.generatedAt
            },
            receivedAt: inquiryRecord.receivedAt,
            summary: {
                family: `${formData.firstName} ${formData.familySurname}`,
                email: formData.parentEmail,
                ageGroup: formData.ageGroup,
                entryYear: formData.entryYear,
                totalInterests: academicInterests.length + creativeInterests.length + coCurricularInterests.length,
                familyPriorities: familyPriorities.length
            }
        };
        
        console.log('✅ WEBHOOK RESPONSE SENT:', response.inquiryId);
        console.log(`🎯 PROSPECTUS URL: ${response.prospectus.url}\n`);
        
        res.json(response);
        
    } catch (error) {
        console.error('❌ WEBHOOK ERROR:', error.message);
        res.status(500).json({
            success: false,
            error: 'Internal server error',
            message: error.message
        });
    }
});

// Serve prospectus files
app.use('/prospectuses', express.static(path.join(__dirname, 'prospectuses')));

// API endpoint to generate prospectus for existing inquiry
app.post('/api/generate-prospectus/:inquiryId', async (req, res) => {
    try {
        const inquiryId = req.params.inquiryId;
        console.log(`\n🔄 MANUAL PROSPECTUS GENERATION REQUEST: ${inquiryId}`);
        
        // Find the inquiry
        const files = await fs.readdir('data');
        const inquiryFiles = files.filter(file => file.startsWith('inquiry-') && file.endsWith('.json'));
        
        let inquiryData = null;
        for (const file of inquiryFiles) {
            const content = await fs.readFile(path.join('data', file), 'utf8');
            const inquiry = JSON.parse(content);
            if (inquiry.id === inquiryId) {
                inquiryData = inquiry;
                break;
            }
        }
        
        if (!inquiryData) {
            return res.status(404).json({
                success: false,
                error: 'Inquiry not found'
            });
        }
        
        // Generate the prospectus
        const prospectusInfo = await generateProspectus(inquiryData);
        
        // Update inquiry status
        const updatedInquiry = await updateInquiryStatus(inquiryId, prospectusInfo);
        
        res.json({
            success: true,
            message: 'Prospectus generated successfully',
            inquiryId,
            prospectus: {
                filename: prospectusInfo.filename,
                url: `http://localhost:${PORT}${prospectusInfo.url}`,
                generatedAt: prospectusInfo.generatedAt
            }
        });
        
    } catch (error) {
        console.error('❌ Error generating prospectus:', error.message);
        res.status(500).json({
            success: false,
            error: 'Failed to generate prospectus',
            message: error.message
        });
    }
});

// Get all inquiries
app.get('/api/inquiries', async (req, res) => {
    try {
        const files = await fs.readdir('data');
        const inquiryFiles = files.filter(file => file.startsWith('inquiry-') && file.endsWith('.json'));
        
        const inquiries = [];
        for (const file of inquiryFiles) {
            const content = await fs.readFile(path.join('data', file), 'utf8');
            const inquiry = JSON.parse(content);
            inquiries.push(inquiry);
        }
        
        // Sort by receivedAt date (newest first)
        inquiries.sort((a, b) => new Date(b.receivedAt) - new Date(a.receivedAt));
        
        res.json({
            success: true,
            count: inquiries.length,
            inquiries
        });
        
    } catch (error) {
        console.error('❌ Error listing inquiries:', error.message);
        res.status(500).json({
            success: false,
            error: 'Failed to list inquiries',
            message: error.message
        });
    }
});

// Get specific inquiry
app.get('/api/inquiries/:id', async (req, res) => {
    try {
        const inquiryId = req.params.id;
        const files = await fs.readdir('data');
        const inquiryFiles = files.filter(file => file.startsWith('inquiry-') && file.endsWith('.json'));
        
        for (const file of inquiryFiles) {
            const content = await fs.readFile(path.join('data', file), 'utf8');
            const inquiry = JSON.parse(content);
            
            if (inquiry.id === inquiryId) {
                return res.json({
                    success: true,
                    inquiry
                });
            }
        }
        
        res.status(404).json({
            success: false,
            error: 'Inquiry not found'
        });
        
    } catch (error) {
        console.error('❌ Error retrieving inquiry:', error.message);
        res.status(500).json({
            success: false,
            error: 'Failed to retrieve inquiry',
            message: error.message
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || 'development'
    });
});

// Root endpoint with basic info
app.get('/', (req, res) => {
    res.json({
        service: 'More House School Webhook Server',
        status: 'running',
        version: '2.0.0',
        endpoints: {
            webhook: 'POST /webhook',
            inquiries: 'GET /api/inquiries',
            inquiry: 'GET /api/inquiries/:id',
            generateProspectus: 'POST /api/generate-prospectus/:inquiryId',
            prospectuses: 'GET /prospectuses/{filename}',
            health: 'GET /health'
        },
        timestamp: new Date().toISOString()
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('🚨 Unhandled error:', err);
    res.status(500).json({
        success: false,
        error: 'Internal server error',
        message: err.message
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: 'Not found',
        message: `Route ${req.method} ${req.path} not found`
    });
});

// Start server
const startServer = async () => {
    try {
        await ensureDirectories();
        
        app.listen(PORT, () => {
            console.log('\n🚀 MORE HOUSE WEBHOOK SERVER STARTED - PHASE 2');
            console.log('═══════════════════════════════════════════════');
            console.log(`🌐 Server running on: http://localhost:${PORT}`);
            console.log(`📋 Webhook endpoint: http://localhost:${PORT}/webhook`);
            console.log(`📊 Health check: http://localhost:${PORT}/health`);
            console.log(`📝 List inquiries: http://localhost:${PORT}/api/inquiries`);
            console.log(`🎨 Prospectus files: http://localhost:${PORT}/prospectuses/`);
            console.log(`🔄 Manual generation: POST /api/generate-prospectus/:inquiryId`);
            console.log('═══════════════════════════════════════════════');
            console.log('✅ Ready to receive form submissions AND generate prospectuses!');
            console.log('🎯 Form submissions will now create personalized HTML prospectuses\n');
        });
        
    } catch (error) {
        console.error('❌ Failed to start server:', error.message);
        process.exit(1);
    }
};

// Handle graceful shutdown
process.on('SIGINT', () => {
    console.log('\n🛑 Shutting down webhook server...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\n🛑 Shutting down webhook server...');
    process.exit(0);
});

// Start the server
startServer();

// Export functions for use in other modules (if needed)
module.exports = {
    generateProspectus,
    updateInquiryStatus,
    generateFilename
};